// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/99designs/gqlgen/graphql"
)

type UploadCsvInput struct {
	// アップロードするCSVデータ
	CsvData graphql.Upload `json:"csvData"`
	// アップロードの種別
	Name *string `json:"name"`
}

type UploadCsvPayload struct {
	// アップロードの結果
	Result UploadResult `json:"result"`
}

type UploadResult string

const (
	// 成功
	UploadResultSucceeded UploadResult = "SUCCEEDED"
	// 失敗
	UploadResultFailed UploadResult = "FAILED"
)

var AllUploadResult = []UploadResult{
	UploadResultSucceeded,
	UploadResultFailed,
}

func (e UploadResult) IsValid() bool {
	switch e {
	case UploadResultSucceeded, UploadResultFailed:
		return true
	}
	return false
}

func (e UploadResult) String() string {
	return string(e)
}

func (e *UploadResult) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UploadResult(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UploadResult", str)
	}
	return nil
}

func (e UploadResult) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
